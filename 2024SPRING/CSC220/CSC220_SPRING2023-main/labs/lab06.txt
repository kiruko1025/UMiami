1. Finish Jumble.java.  There are two exercises.  Verify that you
   cannot unscramble zagboe using words.txt (the dictionary file I
   gave you last week).

   I put a bigger dictionary file called dict.txt into prog06.  Verify
   that Jumble can unscramble zagboe using dict.


2. In Jumble main, switch from TreeMap to PDMap.  This uses prog02
   ArrayBasedPD to implement the map.  Try reading in dict.txt.  How long
   does it take to even get through he words starting with a capital
   letter?

V sorted is V
Vinca sorted is Vacin
Waterport sorted is Waeoprrtt
Wissler sorted is Weilrss
Yunnanese sorted is Yaeennnsu
abbotship sorted is abbhiopst

   Kill it!

   Now edit PDMap.java so it uses your SortedPD instead of
   ArrayBasedPD.  Does it get farther before you lose your patience?


3. Implement find in LinkedMap.java.  Use TestLinkedMap.java to test.

   Fix found.


4. Implement add in LinkedMap.java.  Use TestLinkedMap to test.


5. Finish get.  If the entry is the one you want, return its value.

   Finish put.  If the entry is the one you want, set its value.  What
   do you return?

   Finish implementing Iter.

   Test by running LinkedMap (main).  Correct output is in
   linkedmap-noremove.txt.


6. In Jumble.main, switch to LinkedMap.  How does it compare in speed
   on dict.txt to ArrayBasedPD and SortedPD?


HOMEWORK

7. Implement remove(Entry entry).  Add tests to TestLinkedMap main to
   test it.


8. Implement remove(Object keyAsObject).  Run LinkedMap main.  Correct
   output in linkedmap.txt.


9. In SkipMap, follow the instructions to finish find and add.  See
   skipmap-noremove.txt for the correct output from main.  Set debug
   to false in LinkedMap.java and switch to SkipMap in Jumble and test
   on dict.  Faster?


10. Implement SkipMap remove and change true to false in the first
    line.  See skipmap.txt.  Also test by modifying Jumble to remove,
    get, and put again for each word.  The get should return null!




