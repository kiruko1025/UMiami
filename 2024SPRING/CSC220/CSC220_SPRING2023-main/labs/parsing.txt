PARSING

A compiler has to PARSE your Java program, meaning convert into a more
usable form such a class file.  Similarly, a browser has to parse an
html file in order to display it.  We will examine a small subset of
Java parsing, parsing arithmetic expressions.


EXPRESSION PARSING

The homework exercise is the implement expression parsing using stacks.

1 + 2 * 3 = 7

Does everyone agree?  Why isn't it 9?

* and / have higher PRECEDENCE than + and -, and so the + has to wait.

To override precedence, you have to use parentheses:

(1 + 2) * 3 = 9

Java does not have exponentiation.  You have to use Math.pow.  But we
will allow it in our expression parser using the symbol '^'

^ has higher PRECEDENCE than * and /:

3 * 2 ^ 3 = 24
(3 * 2) ^ 3 = 216

'-' actually has two uses:  "binary -" and "unary -":

3 - 4
-2

Unary minus has has higher precedence than anything except ^:

-4 ^ 2 = -16
(-4) ^ 2 = 16

Inside our program, we will refer to unary - as 'u'.

Unary - is not the same as the +/- key on a calculator.  The +/- key
only changes the value on the display right now.  You can't type the
following from left to right on a calculator

-(1 + 2 * 3)

but we all agree this makes sense and it equals -7.

Now that we know all of this, can you tell me the value of

1 - 2 / - 3 ^ - 4

?  3 to the 4th power is 81, by the way.


STACKS

Question: so how does an unintelligent computer or calculator handle
these expressions?

Answer: stacks.

Everything that has to wait goes on a stack.
Numbers have to wait.  Operators have to wait.
So you need two stacks storing different types.

In the following, the ^ in the second line is a pointer, not exponentiation.
Each stack has the bottom on the left and the top on the right.

1+2*3
^
numberStack: 1
operatorStack:

1+2*3
 ^
numberStack: 1
operatorStack: +

1+2*3
  ^
numberStack: 1 2
operatorStack: +

1+2*3
   ^
numberStack: 1 2
operatorStack: + *

1+2*3
    ^
numberStack: 1 2 3
operatorStack: + *

Everything that has to wait goes on a stack.
When we reach the end, no more waiting.
We first pop and execute the * (popping off two numbers too):

1+2*3
     ^
numberStack: 1 6
operatorStack: +

Then we pop and execute the +:

1+2*3
     ^
numberStack: 7
operatorStack:

Finally, we pop the 7 and return it.


Here is an example in which the * comes before the +:

3*2+1
^
numberStack: 3
operatorStack:

3*2+1
 ^
numberStack: 3
operatorStack: *

3*2+1
  ^
numberStack: 3 2
operatorStack: *

At this point we see a +, which has lower precedence than the * at the
top of the stack.  Since the * has higher precedence, it does NOT have
to wait, and we execute it.

3*2+1
   ^
numberStack: 6
operatorStack:

3*2+1
   ^
numberStack: 6
operatorStack: +

3*2+1
    ^
numberStack: 6 1
operatorStack: +

We have reached the end, so no more waiting.

3*2+1
     ^
numberStack: 7
operatorStack: 

We pop the 7 and return it.


RULE #1

If we reach the end of the expression or an operator which is not
higher precedence than the top of the stack, we can execute the
operator at the top of the stack.

In other word, don't push an operator on top of one with the same or
higher precedence.  Don't push a + on top of a * or even a -.

1-2+3
^
numberStack: 1
operatorStack:

1-2+3
 ^
numberStack: 1
operatorStack: -

1-2+3
  ^
numberStack: 1 2
operatorStack: -

+ has the SAME precedence as -, so we can execute the -:

1-2+3
   ^
numberStack: -1
operatorStack:

1-2+3
   ^
numberStack: -1
operatorStack: +

1-2+3
    ^
numberStack: -1 3
operatorStack: +

1-2+3
     ^
numberStack: 2
operatorStack: 


PARENTHESES

Parentheses are actually pretty easy now that we are using a stack.
Obviously we have to push a '('.  What else can we do?
For a ')', execute everything on the stack back to the '(' and pop it.

((3-2)*5)
^
numberStack: 
operatorStack: (

((3-2)*5)
 ^
numberStack: 
operatorStack: ( (

((3-2)*5)
  ^
numberStack: 3
operatorStack: ( (

((3-2)*5)
   ^
numberStack: 3
operatorStack: ( ( -

((3-2)*5)
    ^
numberStack: 3 2
operatorStack: ( ( -

((3-2)*5)
     ^
numberStack: 1
operatorStack: ( (

((3-2)*5)
     ^
numberStack: 1
operatorStack: (

((3-2)*5)
      ^
numberStack: 1
operatorStack: ( *

((3-2)*5)
       ^
numberStack: 1 5

((3-2)*5)
        ^
numberStack: 5
operatorStack: (

((3-2)*5)
        ^
numberStack: 5
operatorStack:

((3-2)*5)
         ^
numberStack: 5
operatorStack: 


UNARY MINUS RULE

How do we know a - is unary?  What's the rule?

- 2 - - ( - 3 / - 2 ) - 5
u   b u   u     u     b

1. A - is unary if it comes at the beginning or after an operator.
   Otherwise, it is binary.

2. Just push a unary minus as a 'u' not a '-'.  It doesn't matter what
   is on top of the stack, just push it.  Rule #1 does not apply
   because 'u' is unary.


BACK TO THE EXAMPLE

1-2/-3^-4
^
numberStack: 1
operatorStack:

1-2/-3^-4
 ^
numberStack: 1
operatorStack: -

1-2/-3^-4
  ^
numberStack: 1 2
operatorStack: -

1-2/-3^-4
   ^
numberStack: 1 2
operatorStack: - /

1-2/-3^-4
    ^
numberStack: 1 2
operatorStack: - / u

1-2/-3^-4
     ^
numberStack: 1 2 3
operatorStack: - / u

1-2/-3^-4
      ^
numberStack: 1 2 3
operatorStack: - / u ^

1-2/-3^-4
       ^
numberStack: 1 2 3
operatorStack: - / u ^ u

1-2/-3^-4
        ^
numberStack: 1 2 3 4
operatorStack: - / u ^ u

1-2/-3^-4
         ^
numberStack: 1 2 3 -4
operatorStack: - / u ^

1-2/-3^-4
         ^
numberStack: 1 2 0.01234567901235...
operatorStack: - / u

(0.01234567901235... is 1/81.)

1-2/-3^-4
         ^
numberStack: 1 2 -0.01234567901235...
operatorStack: - /

1-2/-3^-4
         ^
numberStack: 1 -162
operatorStack: -

1-2/-3^-4
         ^
numberStack: 163
operatorStack: 

Is that what you got?

